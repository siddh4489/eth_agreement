'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'D:\\eth_react\\pages\\index.js?entry';

var HDWalletProvider = require('truffle-hdwallet-provider');
var Web3 = require('web3');
var provider = new HDWalletProvider('best hair current identify nation speed rough goddess license winner calm demand', 'https://rinkeby.infura.io/v3/9bd8135f514a479990c6b4062cf24855');

var web3 = new Web3(provider);

var CampaignIndex = function (_Component) {
  (0, _inherits3.default)(CampaignIndex, _Component);

  function CampaignIndex() {
    (0, _classCallCheck3.default)(this, CampaignIndex);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignIndex, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 23
        }
      }, this.props.accounts[0], _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 25
        }
      }, 'Open Campaigns'), _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 27
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: 'right',
        content: 'Create Campaign',
        icon: 'add circle',
        primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 28
        }
      })));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return web3.eth.getAccounts();

              case 2:
                accounts = _context.sent;

                console.log('Attempting to deploy from account', accounts[0]);
                return _context.abrupt('return', { accounts: accounts });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSERXYWxsZXRQcm92aWRlciIsInJlcXVpcmUiLCJXZWIzIiwicHJvdmlkZXIiLCJ3ZWIzIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicHJvcHMiLCJhY2NvdW50cyIsImZsb2F0ZWQiLCJjb250ZW50IiwiaWNvbiIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwiY29uc29sZSIsImxvZyIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUZBLElBQUlBLGVBQWUsc0NBQW5COztBQUdBLElBQUlDLG1CQUFtQkMsT0FBbkIsNkJBQUo7QUFDQSxJQUFJQyxPQUFPRCxPQUFQLFFBQUo7QUFDQSxJQUFJRSxXQUFXLElBQUlILGdCQUFKLENBQXFCLGtGQUFyQixFQUF5RywrREFBekcsQ0FBZjs7QUFFQSxJQUFJSSxPQUFPLElBQUlGLElBQUosQ0FBU0MsUUFBVCxDQUFYOztBQUVBLElBQUlFLGdCQUFnQixVQUFVQyxVQUFWLEVBQXNCO0FBQ3hDLDBCQUFVRCxhQUFWLEVBQXlCQyxVQUF6Qjs7QUFFQSxXQUFTRCxhQUFULEdBQXlCO0FBQ3ZCLGtDQUFnQixJQUFoQixFQUFzQkEsYUFBdEI7O0FBRUEsV0FBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsY0FBY0UsU0FBZCxJQUEyQiw4QkFBdUJGLGFBQXZCLENBQTVCLEVBQW1FRyxLQUFuRSxDQUF5RSxJQUF6RSxFQUErRUMsU0FBL0UsQ0FBakMsQ0FBUDtBQUNEOztBQUVELDZCQUFhSixhQUFiLEVBQTRCLENBQUM7QUFDM0JLLFNBQUssUUFEc0I7QUFFM0JDLFdBQU8sU0FBU0MsTUFBVCxHQUFrQjtBQUN2QixhQUFPLGdCQUFNQyxhQUFOLENBQ0wsS0FESyxFQUVMO0FBQ0VDLGtCQUFVO0FBQ1JDLG9CQUFVaEIsWUFERjtBQUVSaUIsc0JBQVk7QUFGSjtBQURaLE9BRkssRUFRTCxLQUFLQyxLQUFMLENBQVdDLFFBQVgsQ0FBb0IsQ0FBcEIsQ0FSSyxFQVNMLGdCQUFNTCxhQUFOLENBQ0UsSUFERixFQUVFO0FBQ0VDLGtCQUFVO0FBQ1JDLG9CQUFVaEIsWUFERjtBQUVSaUIsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxnQkFSRixDQVRLLEVBbUJMLGdCQUFNSCxhQUFOLENBQ0UsR0FERixFQUVFO0FBQ0VDLGtCQUFVO0FBQ1JDLG9CQUFVaEIsWUFERjtBQUVSaUIsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxnQkFBTUgsYUFBTiwwQkFBNEI7QUFDMUJNLGlCQUFTLE9BRGlCO0FBRTFCQyxpQkFBUyxpQkFGaUI7QUFHMUJDLGNBQU0sWUFIb0I7QUFJMUJDLGlCQUFTLElBSmlCO0FBSzFCUixrQkFBVTtBQUNSQyxvQkFBVWhCLFlBREY7QUFFUmlCLHNCQUFZO0FBRko7QUFMZ0IsT0FBNUIsQ0FSRixDQW5CSyxDQUFQO0FBdUNEO0FBMUMwQixHQUFELENBQTVCLEVBMkNJLENBQUM7QUFDSE4sU0FBSyxpQkFERjtBQUVIQyxXQUFPLFlBQVk7QUFDakIsVUFBSVksT0FBTyxpQ0FBbUIsYUFBYSxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLE9BQVQsR0FBbUI7QUFDckYsWUFBSVAsUUFBSjtBQUNBLGVBQU8sc0JBQW9CUSxJQUFwQixDQUF5QixTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QjtBQUMxRCxpQkFBTyxDQUFQLEVBQVU7QUFDUixvQkFBUUEsU0FBU0MsSUFBVCxHQUFnQkQsU0FBU0UsSUFBakM7QUFDRSxtQkFBSyxDQUFMO0FBQ0VGLHlCQUFTRSxJQUFULEdBQWdCLENBQWhCO0FBQ0EsdUJBQU8xQixLQUFLMkIsR0FBTCxDQUFTQyxXQUFULEVBQVA7O0FBRUYsbUJBQUssQ0FBTDtBQUNFZCwyQkFBV1UsU0FBU0ssSUFBcEI7O0FBRUFDLHdCQUFRQyxHQUFSLENBQVksbUNBQVosRUFBaURqQixTQUFTLENBQVQsQ0FBakQ7QUFDQSx1QkFBT1UsU0FBU1EsTUFBVCxDQUFnQixRQUFoQixFQUEwQixFQUFFbEIsVUFBVUEsUUFBWixFQUExQixDQUFQOztBQUVGLG1CQUFLLENBQUw7QUFDQSxtQkFBSyxLQUFMO0FBQ0UsdUJBQU9VLFNBQVNTLElBQVQsRUFBUDtBQWJKO0FBZUQ7QUFDRixTQWxCTSxFQWtCSlosT0FsQkksRUFrQkssSUFsQkwsQ0FBUDtBQW1CRCxPQXJCMEMsQ0FBaEMsQ0FBWDs7QUF1QkEsZUFBU2EsZUFBVCxHQUEyQjtBQUN6QixlQUFPZixLQUFLZixLQUFMLENBQVcsSUFBWCxFQUFpQkMsU0FBakIsQ0FBUDtBQUNEOztBQUVELGFBQU82QixlQUFQO0FBQ0QsS0E3Qk07QUFGSixHQUFELENBM0NKOztBQTZFQSxTQUFPakMsYUFBUDtBQUNELENBdkZtQixrQkFBcEI7O2tCQXlGZUEsYSIsImZpbGUiOiJ1bmtub3duIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcic7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InO1xuaW1wb3J0IF9PYmplY3QkZ2V0UHJvdG90eXBlT2YgZnJvbSAnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG52YXIgX2pzeEZpbGVOYW1lID0gJ0Q6XFxcXGV0aF9yZWFjdFxcXFxwYWdlc1xcXFxpbmRleC5qcz9lbnRyeSc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2FyZCwgQnV0dG9uIH0gZnJvbSAnc2VtYW50aWMtdWktcmVhY3QnO1xudmFyIEhEV2FsbGV0UHJvdmlkZXIgPSByZXF1aXJlKCd0cnVmZmxlLWhkd2FsbGV0LXByb3ZpZGVyJyk7XG52YXIgV2ViMyA9IHJlcXVpcmUoJ3dlYjMnKTtcbnZhciBwcm92aWRlciA9IG5ldyBIRFdhbGxldFByb3ZpZGVyKCdiZXN0IGhhaXIgY3VycmVudCBpZGVudGlmeSBuYXRpb24gc3BlZWQgcm91Z2ggZ29kZGVzcyBsaWNlbnNlIHdpbm5lciBjYWxtIGRlbWFuZCcsICdodHRwczovL3JpbmtlYnkuaW5mdXJhLmlvL3YzLzliZDgxMzVmNTE0YTQ3OTk5MGM2YjQwNjJjZjI0ODU1Jyk7XG5cbnZhciB3ZWIzID0gbmV3IFdlYjMocHJvdmlkZXIpO1xuXG52YXIgQ2FtcGFpZ25JbmRleCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDYW1wYWlnbkluZGV4LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYW1wYWlnbkluZGV4KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYW1wYWlnbkluZGV4KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ2FtcGFpZ25JbmRleC5fX3Byb3RvX18gfHwgX09iamVjdCRnZXRQcm90b3R5cGVPZihDYW1wYWlnbkluZGV4KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2FtcGFpZ25JbmRleCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IDIzXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aGlzLnByb3BzLmFjY291bnRzWzBdLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdoMycsXG4gICAgICAgICAge1xuICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogMjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdPcGVuIENhbXBhaWducydcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnYScsXG4gICAgICAgICAge1xuICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogMjdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7XG4gICAgICAgICAgICBmbG9hdGVkOiAncmlnaHQnLFxuICAgICAgICAgICAgY29udGVudDogJ0NyZWF0ZSBDYW1wYWlnbicsXG4gICAgICAgICAgICBpY29uOiAnYWRkIGNpcmNsZScsXG4gICAgICAgICAgICBwcmltYXJ5OiB0cnVlLFxuICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogMjhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgICAgICB2YXIgYWNjb3VudHM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlYjMuZXRoLmdldEFjY291bnRzKCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGFjY291bnRzID0gX2NvbnRleHQuc2VudDtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBdHRlbXB0aW5nIHRvIGRlcGxveSBmcm9tIGFjY291bnQnLCBhY2NvdW50c1swXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgeyBhY2NvdW50czogYWNjb3VudHMgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFByb3BzKCkge1xuICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0SW5pdGlhbFByb3BzO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIENhbXBhaWduSW5kZXg7XG59KENvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbXBhaWduSW5kZXg7Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSERXYWxsZXRQcm92aWRlciIsInJlcXVpcmUiLCJXZWIzIiwicHJvdmlkZXIiLCJ3ZWIzIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicHJvcHMiLCJhY2NvdW50cyIsImZsb2F0ZWQiLCJjb250ZW50IiwiaWNvbiIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwiY29uc29sZSIsImxvZyIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUZBLElBQUlBLGVBQWUsc0NBQW5COztBQUdBLElBQUlDLG1CQUFtQkMsT0FBbkIsNkJBQUo7QUFDQSxJQUFJQyxPQUFPRCxPQUFQLFFBQUo7QUFDQSxJQUFJRSxXQUFXLElBQUlILGdCQUFKLENBQXFCLGtGQUFyQixFQUF5RywrREFBekcsQ0FBZjs7QUFFQSxJQUFJSSxPQUFPLElBQUlGLElBQUosQ0FBU0MsUUFBVCxDQUFYOztBQUVBLElBQUlFLGdCQUFnQixVQUFVQyxVQUFWLEVBQXNCO0FBQ3hDLDBCQUFVRCxhQUFWLEVBQXlCQyxVQUF6Qjs7QUFFQSxXQUFTRCxhQUFULEdBQXlCO0FBQ3ZCLGtDQUFnQixJQUFoQixFQUFzQkEsYUFBdEI7O0FBRUEsV0FBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsY0FBY0UsU0FBZCxJQUEyQiw4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