{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext, useContext } from 'react';\nimport createAuth0Client from '@auth0/auth0-spa-js'; // create the context\n\nexport const Auth0Context = createContext();\nexport const useAuth0 = () => useContext(Auth0Context); // create a provider\n\nexport class Auth0Provider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      auth0Client: null,\n      isLoading: true,\n      isAuthenticated: false,\n      user: null\n    });\n\n    _defineProperty(this, \"config\", {\n      domain: process.env.REACT_APP_AUTH0_DOMAIN || 'dev-14avhjuy.auth0.com',\n      client_id: process.env.REACT_APP_AUTH0_CLIENT_ID || 'ZJ14f961zjftMYbOBnZPnEGJd3ZHyQJC',\n      globalredirect_uri: window.location.origin\n    });\n\n    _defineProperty(this, \"initializeAuth0\", async () => {\n      const auth0Client = await createAuth0Client(this.config);\n      console.log('auth0Client : ' + JSON.stringify(auth0Client));\n      this.setState({\n        auth0Client\n      }); // check to see if they have been redirected after login\n\n      if (window.location.search.includes('code=')) {\n        return this.handleRedirectCallback();\n      }\n\n      const isAuthenticated = await auth0Client.isAuthenticated();\n      const user = isAuthenticated ? await auth0Client.getUser() : null;\n      console.log('user : ' + JSON.stringify(user));\n      this.setState({\n        isLoading: false,\n        isAuthenticated,\n        user\n      });\n    });\n\n    _defineProperty(this, \"handleRedirectCallback\", async () => {\n      this.setState({\n        isLoading: true\n      });\n      await this.state.auth0Client.handleRedirectCallback();\n      const user = await this.state.auth0Client.getUser();\n      this.setState({\n        user,\n        isAuthenticated: true,\n        isLoading: false\n      });\n      window.history.replaceState({}, document.title, window.location.pathname);\n    });\n  }\n\n  componentDidMount() {\n    this.initializeAuth0();\n  } // initialize the auth0 library\n\n\n  render() {\n    const {\n      auth0Client,\n      isLoading,\n      isAuthenticated,\n      user\n    } = this.state;\n    const {\n      children\n    } = this.props;\n    const configObject = {\n      isLoading,\n      isAuthenticated,\n      user,\n      loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n      getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n      getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n      logout: (...p) => auth0Client.logout(...p)\n    };\n    return __jsx(Auth0Context.Provider, {\n      value: configObject\n    }, children);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}